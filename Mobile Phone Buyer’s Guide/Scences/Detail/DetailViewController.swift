//
//  DetailViewController.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: class {
    func displayPhoneDetail(viewModel: Detail.PhoneDetail.ViewModel)
    func displayError(error: Detail.PhoneDetail.Error)
}

class DetailViewController: UIViewController, DetailDisplayLogic {
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    var phoneImagesPath: [String] = []

    // MARK: - View elements
    @IBOutlet weak var imageCollectionView: UICollectionView! {
        didSet {
            imageCollectionView <-< {
                $0.register(cellType: DetailCollectionViewCell.self)
                $0.delegate = self
                $0.dataSource = self
                $0.isPagingEnabled = true
                if let flowLayout = $0.collectionViewLayout as? UICollectionViewFlowLayout {
                    flowLayout.scrollDirection = .horizontal
                }
            }
        }
    }
    @IBOutlet weak var ratingLabel: UILabel!
    @IBOutlet weak var priceLabel: UILabel!
    @IBOutlet weak var descriptionLabel: DetailLabel!

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing


    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        showPhoneDetail()
    }

    // MARK: Do something
    func showPhoneDetail() {
        let request = Detail.PhoneDetail.Request()
        interactor?.loadPhoneDetail(request: request)
    }

    func displayPhoneDetail(viewModel: Detail.PhoneDetail.ViewModel) {
        self.title = viewModel.name
        ratingLabel.text = viewModel.rating
        priceLabel.text = viewModel.price
        descriptionLabel.text = viewModel.description
        phoneImagesPath = viewModel.imagesPath
        imageCollectionView.reloadData()
    }

    func displayError(error: Detail.PhoneDetail.Error) {
        self.showInfoAlert(title: "Error", message: error.errorMessage)
    }
}


// MARK: - UICollectionViewDelegateFlowLayout
extension DetailViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.bounds.width, height: collectionView.bounds.height)
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0
    }
}

// MARK: - UICollectionViewDataSource
extension DetailViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return phoneImagesPath.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = dequeueReuseableListTableViewCell(for: indexPath),
            let phoneImagePath = phoneImagesPath[safe: indexPath.row] else { return UICollectionViewCell() }
        cell.configure(withImagePath: phoneImagePath)
        return cell
    }
}

// MARK: - DetailCollectionViewCell Factory Method
extension DetailViewController {
    func dequeueReuseableListTableViewCell(for indexPath: IndexPath) -> DetailCollectionViewCell? {
        return self.imageCollectionView.dequeueReusableCell(with: DetailCollectionViewCell.self, for: indexPath)
    }
}

