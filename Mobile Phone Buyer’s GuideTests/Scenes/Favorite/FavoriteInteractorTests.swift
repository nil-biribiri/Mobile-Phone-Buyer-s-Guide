//
//  FavoriteInteractorTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class FavoriteInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: FavoriteInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupFavoriteInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupFavoriteInteractor() {
        sut = FavoriteInteractor()
    }

    // MARK: Test doubles

    class FavoritePresentationLogicSpy: FavoritePresentationLogic {
        var presentFavoriteCalled = false
        var showLoadingCalled = false

        func presentFavorite(response: Favorite.FavoriteList.Response) {
            presentFavoriteCalled = true
        }

        func showLoading() {
            showLoadingCalled = true
        }

        func hideLoading() {}
    }
    class FavoriteWorkerSuccessMock: FavoriteWorker {
        var loadFavoritePhoneListCalled = false
        var setFavoriteCalled = false

        override func loadFavoritePhoneList(withPredicate predicate: PhoneStore.Predicate) -> [Phone]? {
            loadFavoritePhoneListCalled = true
            return [Phone()]
        }

        override func setFavorite(withId id: Int) -> [Phone]? {
            setFavoriteCalled = true
            return nil
        }
    }


    // MARK: Tests
    func testFetchFavoritePhoneList() {
        // Given
        let spy = FavoritePresentationLogicSpy()
        let mock = FavoriteWorkerSuccessMock()
        sut.presenter = spy
        sut.worker = mock
        let request = Favorite.FavoriteList.Request()

        // When
        sut.fetchFavoriteList(request: request)

        // Then
        XCTAssertTrue(spy.showLoadingCalled, "fetchFavoriteList(request:) should ask the presenter to show loading indicator.")
        XCTAssertTrue(mock.loadFavoritePhoneListCalled, "fetchFavoriteList(request:) should ask the worker to call loadFavoritePhoneList")
        XCTAssertTrue(spy.presentFavoriteCalled, "fetchFavoriteList(request:) should ask the presenter to present favorite phone list.")
    }

    func testRemoveFavoritePhone() {
        // Given
        let spy = FavoritePresentationLogicSpy()
        let mock = FavoriteWorkerSuccessMock()
        sut.presenter = spy
        sut.worker = mock

        // When
        sut.removeFavoritePhone(withId: 0)

        // Then
        XCTAssertTrue(mock.setFavoriteCalled, "removeFavoritePhone(withId id:) should ask the worker call setFavorite.")
    }

}
