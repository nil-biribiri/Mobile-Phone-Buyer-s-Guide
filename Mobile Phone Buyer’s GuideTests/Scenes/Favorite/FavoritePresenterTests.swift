//
//  FavoritePresenterTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class FavoritePresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: FavoritePresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupFavoritePresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupFavoritePresenter() {
        sut = FavoritePresenter()
    }

    // MARK: Test doubles

    class FavoriteDisplayLogicSpy: FavoriteDisplayLogic {
        var displayFavoriteListCalled = false
        var hideLoaderCalled = false

        var viewModel = Favorite.FavoriteList.ViewModel(displayPhone: [])

        func displayFavoriteList(viewModel: Favorite.FavoriteList.ViewModel) {
            self.viewModel = viewModel
            displayFavoriteListCalled = true
        }

        func displayLoader() {}

        func hideLoader() {
            hideLoaderCalled = true
        }
    }

    // MARK: Tests
    func testPresentFavoriteList() {
        // Given
        let spy = FavoriteDisplayLogicSpy()
        sut.viewController = spy
        let response = Favorite.FavoriteList.Response(favoritePhoneList: [Phone()])

        // When
        sut.presentFavorite(response: response)

        // Then
        XCTAssertTrue(spy.displayFavoriteListCalled, "presentFavorite(response:) should ask the view controller to display the result.")
        XCTAssertTrue(spy.hideLoaderCalled)

    }

    func testDisplayDeviceListFormatData() {
        // Given
        let spy = FavoriteDisplayLogicSpy()
        sut.viewController = spy
        let phone = Phone(id: 0,
                          name: "MockName",
                          price: 100.222,
                          brand: "MockBrand",
                          desciption: "MockDescription",
                          rating: 4.5,
                          thumbImageURL: "link",
                          isFavorite: true)
        let mockFavoritePhoneList = [phone]
        let response = Favorite.FavoriteList.Response.init(favoritePhoneList: mockFavoritePhoneList)
        let expectedViewModel = [Favorite.FavoriteList.ViewModel.DisplayPhone.init(id: 0,
                                                                             name: "MockName",
                                                                             description: "MockDescription",
                                                                             price: "Price: $100.22",
                                                                             rating: "Rating: 4.5",
                                                                             thumbnailPath: "link")]

        // When
        sut.presentFavorite(response: response)

        // Then
        XCTAssertEqual(spy.viewModel.displayPhone, expectedViewModel)
    }
}
