//
//  DetailPresenterTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class DetailPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: DetailPresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupDetailPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupDetailPresenter() {
        sut = DetailPresenter()
    }

    // MARK: Test doubles

    class DetailDisplayLogicSpy: DetailDisplayLogic {
        var displayPhoneDetailCalled = false
        var displayErrorCalled = false

        var viewModel: Detail.PhoneDetail.ViewModel!

        func displayPhoneDetail(viewModel: Detail.PhoneDetail.ViewModel) {
            self.viewModel = viewModel
            displayPhoneDetailCalled = true
        }

        func displayError(error: Detail.PhoneDetail.Error) {
            displayErrorCalled = true
        }
    }

    // MARK: Tests
    func testDisplayPhoneDetail() {
        // Given
        let spy = DetailDisplayLogicSpy()
        sut.viewController = spy
        let response = Detail.PhoneDetail.Response(phoneDetail: Phone(), phoneImages: [], errorMessage: nil)

        // When
        sut.presentPhoneDetail(response: response)

        // Then
        XCTAssertTrue(spy.displayPhoneDetailCalled, "presentPhoneDetail(response:) should ask the view controller to display the result")
    }

    func testDisplayPhoneDetailFormatData() {
        // Given
        let spy = DetailDisplayLogicSpy()
        sut.viewController = spy
        let phone = Phone(id: 0,
                          name: "MockName",
                          price: 100.222,
                          brand: "MockBrand",
                          desciption: "MockDescription",
                          rating: 4.5,
                          thumbImageURL: "link",
                          isFavorite: true)
        let phoneImages = [PhoneImage(url: "www.a.com")]
        let response = Detail.PhoneDetail.Response.init(phoneDetail: phone, phoneImages: phoneImages, errorMessage: nil)
        let expectedViewModel = Detail.PhoneDetail.ViewModel.init(id: 0,
                                                                  name: "MockName",
                                                                  description: "MockDescription",
                                                                  price: "Price: $100.22",
                                                                  rating: "Rating: 4.5",
                                                                  imagesPath: ["http://www.a.com"])

        // When
        sut.presentPhoneDetail(response: response)

        // Then
        XCTAssertEqual(spy.viewModel, expectedViewModel)
    }

    
}
