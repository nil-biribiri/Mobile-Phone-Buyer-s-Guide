//
//  ListViewController.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 26/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: BaseDisplayLogic {
    func displayDeviceList(viewModel: List.DeviceList.ViewModel)
    func displayError(error: List.DeviceList.Error)
}

class ListViewController: BaseViewController, ListDisplayLogic {
    var interactor: ListBusinessLogic?
    var router: (ListRoutingLogic & ListDataPassing)?
    var phoneList: [List.DeviceList.ViewModel.DisplayPhone] = []

    // MARK: - View elements
    lazy var listTableView: UITableView = {
        let listTableView = UITableView() <-< {
            $0.register(ListTableViewCell.self)
            $0.tableHeaderView = UIView(frame: .zero)
            $0.tableFooterView = UIView(frame: .zero)
            $0.backgroundColor = .clear
            $0.alwaysBounceVertical = true
            $0.estimatedRowHeight = 120.0
            $0.rowHeight = UITableView.automaticDimension
            $0.separatorStyle = .singleLine
            $0.separatorInset = .zero
            $0.delegate = self
            $0.dataSource = self
        }
        return listTableView
    }()
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setUI()
        loadPhoneList()
    }

    // MARK: - View Setup
    func setUI() {
        view.addSubview(listTableView, attachedTo: view)
    }

    func loadPhoneList() {
        let request = List.DeviceList.Request()
        interactor?.fetchPhoneList(request: request)
    }

    func displayDeviceList(viewModel: List.DeviceList.ViewModel) {
        phoneList = viewModel.displayPhone
        listTableView.reloadData()
    }

    func displayError(error: List.DeviceList.Error) {
        showInfoAlert(title: "Error", message: error.errorMessage)
    }
    
}

extension ListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return phoneList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = dequeueReuseableListTableViewCell(for: indexPath),
            let phoneData = phoneList[safe: indexPath.row] else { return UITableViewCell() }
        cell.configure(with: phoneData)
        cell.delegate = self
        return cell
    }
}

extension ListViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.navigateToDetail()
    }
}

extension ListViewController: ListTableViewCellProtocol {
    func favoriteButtonDidSelected(id: Int) {
        interactor?.setFavoritePhone(withId: id)
    }
}

// MARK: - ListTableViewCell Factory Method
extension ListViewController {
    func dequeueReuseableListTableViewCell(for indexPath: IndexPath) -> ListTableViewCell? {
        return self.listTableView.dequeueReusableCell(for: ListTableViewCell.self, for: indexPath)
    }
}

