//
//  DetailViewControllerTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class DetailViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var mockPhoneDetail: Detail.PhoneDetail.ViewModel!
    var sut: DetailViewController!
    var window: UIWindow!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupDetailViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    func setupDetailViewController() {
        sut = DetailViewController()
        mockPhoneDetail = Detail.PhoneDetail.ViewModel.init(id: 0,
                                                            name: "MockName",
                                                            description: "MockDescription",
                                                            price: "MockPrice",
                                                            rating: "MockRating",
                                                            imagesPath: ["a", "b", "c"])
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles
    class DetailBusinessLogicSpy: DetailBusinessLogic {
        var loadPhoneDetailCalled = false
        func loadPhoneDetail(request: Detail.PhoneDetail.Request) {
            loadPhoneDetailCalled = true
        }
    }
    class CollectionViewSpy: UICollectionView {
        // MARK: Method call expectations
        var reloadDataCalled = false
        
        // MARK: Spied methods
        override func reloadData() {
            reloadDataCalled = true
        }
    }


    // MARK: Tests
    func testShouldShowPhoneDetailWhenViewIsLoaded() {
        // Given
        let spy = DetailBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.loadPhoneDetailCalled, "viewDidLoad() should ask the interactor to loadPhoneDetail")
    }

    func testDisplayPhoneDetail() {
        // Given
        sut.interactor = DetailBusinessLogicSpy()
        loadView()

        // When
        sut.displayPhoneDetail(viewModel: mockPhoneDetail)

        // Then
        XCTAssertEqual(sut.title, mockPhoneDetail.name)
        XCTAssertEqual(sut.ratingLabel.text, mockPhoneDetail.rating)
        XCTAssertEqual(sut.priceLabel.text, mockPhoneDetail.price)
        XCTAssertEqual(sut.descriptionLabel.text, mockPhoneDetail.description)
        XCTAssertEqual(sut.phoneImagesPath, mockPhoneDetail.imagesPath)
    }

    func testDisplayError() {
        // Given
        sut.interactor = DetailBusinessLogicSpy()
        loadView()
        let error = Detail.PhoneDetail.Error.init(errorMessage: "Error message")

        // When
        sut.displayError(error: error)
        let alertController = sut.presentedViewController as? UIAlertController

        // Then
        XCTAssertNotNil(alertController, "sut.displayError(error: ) should show alert view controller")
        XCTAssertEqual(alertController?.title, "Error", "error title should equal to Error")
        XCTAssertEqual(alertController?.message, error.errorMessage, "Error message should equal to \(error.errorMessage)")
    }

    func testCollectionItemShouldEqualPhoneImageList() {
        // Given
        sut.interactor = DetailBusinessLogicSpy()
        loadView()
        sut.phoneImagesPath = mockPhoneDetail.imagesPath

        // When
        sut.imageCollectionView.reloadData()
        let numberOfItems = sut.imageCollectionView.numberOfItems(inSection: 0)

        // Then
        XCTAssertEqual(numberOfItems, sut.phoneImagesPath.count, "The number of imageCollectionView items should equal the number of phoneImagesPath to display")
    }

    func testConfigureDetailCollectionViewCell() {
        // Given
        sut.interactor = DetailBusinessLogicSpy()
        loadView()
        sut.phoneImagesPath = mockPhoneDetail.imagesPath
        sut.imageCollectionView.reloadData()
        let indexPath = IndexPath(row: 0, section: 0)

        // When
        let cell = sut.imageCollectionView.dataSource?.collectionView(sut.imageCollectionView, cellForItemAt: indexPath) as? DetailCollectionViewCell
        
        // Then
        let imagePath = sut.phoneImagesPath[0]
        XCTAssertEqual(cell?.imageView.currentImageURL?.absoluteString, imagePath)
    }


}
