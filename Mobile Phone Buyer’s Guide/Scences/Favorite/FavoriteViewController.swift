//
//  FavoriteViewController.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 27/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoriteDisplayLogic: BaseDisplayLogic {
    func displayFavoriteList(viewModel: Favorite.FavoriteList.ViewModel)
}

class FavoriteViewController: BaseViewController, FavoriteDisplayLogic {
    var interactor: FavoriteBusinessLogic?
    var router: (NSObjectProtocol & FavoriteRoutingLogic & FavoriteDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - View elements
    lazy var favoriteTableView: UITableView = {
        let favoriteTableView = UITableView() <-< {
            $0.register(ListTableViewCell.self)
            $0.tableHeaderView = UIView(frame: .zero)
            $0.tableFooterView = UIView(frame: .zero)
            $0.backgroundColor = .clear
            $0.alwaysBounceVertical = true
            $0.estimatedRowHeight = 120.0
            $0.rowHeight = UITableView.automaticDimension
            $0.separatorStyle = .singleLine
            $0.separatorInset = .zero
            $0.delegate = self
            $0.dataSource = self
        }
        return favoriteTableView
    }()

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = FavoriteInteractor()
        let presenter = FavoritePresenter()
        let router = FavoriteRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        loadFavoriteList()
    }

    // MARK: Do something
    func loadFavoriteList() {
        let request = Favorite.FavoriteList.Request()
        interactor?.fetchFavoriteList(request: request)
    }

    func displayFavoriteList(viewModel: Favorite.FavoriteList.ViewModel) {
        
    }
}

extension FavoriteViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = dequeueReuseableListTableViewCell(for: indexPath) else { return UITableViewCell() }
//        cell.configure(with: phoneData)
//        cell.delegate = self
        return cell
    }
}

extension FavoriteViewController: UITableViewDelegate {

}

// MARK: - ListTableViewCell Factory Method
extension FavoriteViewController {
    func dequeueReuseableListTableViewCell(for indexPath: IndexPath) -> ListTableViewCell? {
        return self.favoriteTableView.dequeueReusableCell(for: ListTableViewCell.self, for: indexPath)
    }
}

