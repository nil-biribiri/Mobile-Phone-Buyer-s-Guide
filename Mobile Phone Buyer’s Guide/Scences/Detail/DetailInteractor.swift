//
//  DetailInteractor.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailBusinessLogic {
    func loadPhoneDetail(request: Detail.PhoneDetail.Request)
}

protocol DetailDataStore {
    var phoneId: Int! { get set }
    var phoneDetail: Phone? { get }
}

class DetailInteractor: DetailBusinessLogic, DetailDataStore {
    var presenter: DetailPresentationLogic?
    var worker = DetailWorker()
    var phoneId: Int!
    var phoneDetail: Phone?


    // MARK: Do something
    func loadPhoneDetail(request: Detail.PhoneDetail.Request) {
        if let phoneData = worker.getPhoneDetail(withId: phoneId) {
            let response = Detail.PhoneDetail.Response(phoneDetail: phoneData, phoneImages: [], errorMessage: nil)
            phoneDetail = phoneData
            presenter?.presentPhoneDetail(response: response)
            fetchPhoneImages()
        }
    }

    func fetchPhoneImages() {
        worker.fetchPhoneImages(withId: phoneId) { [weak self] (result) in
            var response = Detail.PhoneDetail.Response()
            switch result {
            case .success(let value):
                response.phoneDetail = self?.phoneDetail
                response.phoneImages = value
            case .failure(let error):
                response.errorMessage = error.localizedDescription
            }
            self?.presenter?.presentPhoneDetail(response: response)
        }
    }
}
