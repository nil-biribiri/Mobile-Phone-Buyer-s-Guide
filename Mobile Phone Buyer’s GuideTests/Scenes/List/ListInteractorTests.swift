//
//  ListInteractorTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class ListInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: ListInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupListInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupListInteractor() {
        sut = ListInteractor()
    }

    // MARK: Test doubles
    class ListPresentationLogicSpy: ListPresentationLogic {
        var presentPhoneListCalled = false
        var showLoadingCalled = false
        var hideLoadingCalled = false

        func presentPhoneList(response: List.DeviceList.Response) {
            presentPhoneListCalled = true
        }

        func showLoading() {
            showLoadingCalled = true
        }

        func hideLoading() {
            hideLoadingCalled = true
        }
    }
    class ListWorkerSuccessMock: ListWorker {
        var fetchPhoneListCalled = false
        var setFavoriteCalled = false

        override func fetchPhoneList(withPredicate predicate: PhoneStore.Predicate, completion: @escaping (Result<[Phone]>) -> Void) {
            fetchPhoneListCalled = true
            completion(Result.success([Phone()]))
        }

        override func setFavorite(withId id: Int) -> [Phone]? {
            setFavoriteCalled = true
            return nil
        }
    }

    // MARK: Tests
    func testfetchPhoneList() {
        // Given
        let spy = ListPresentationLogicSpy()
        let mock = ListWorkerSuccessMock()
        sut.presenter = spy
        sut.worker = mock
        let request = List.DeviceList.Request(withPredicate: PhoneStore.Predicate.ratingDescending)

        // When
        sut.fetchPhoneList(request: request)

        // Then
        XCTAssertTrue(spy.showLoadingCalled, "fetchPhoneList(request:) should ask the presenter to show loading indicator.")
        XCTAssertTrue(mock.fetchPhoneListCalled, "fetchPhoneList(request:) should ask the worker call fetchPhoneList.")
        XCTAssertTrue(spy.presentPhoneListCalled, "fetchPhoneList(request:) should ask the presenter to present phone list.")
    }

    func testSetFavoritePhone() {
        // Given
        let spy = ListPresentationLogicSpy()
        let mock = ListWorkerSuccessMock()
        sut.presenter = spy
        sut.worker = mock

        // When
        sut.setFavoritePhone(withId: 0)

        // Then
        XCTAssertTrue(mock.setFavoriteCalled, "setFavoritePhone(withId id:) should ask the worker call setFavorite.")
    }

}
