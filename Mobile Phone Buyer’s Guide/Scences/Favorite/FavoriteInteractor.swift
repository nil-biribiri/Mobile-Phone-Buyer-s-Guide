//
//  FavoriteInteractor.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 27/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Realm
import RealmSwift

protocol FavoriteBusinessLogic {
    func fetchFavoriteList(request: Favorite.FavoriteList.Request)
    func removeFavoritePhone(withId id: Int)
}

protocol FavoriteDataStore {
    var favoritePhoneList: [Phone] { get }
}

class FavoriteInteractor: FavoriteBusinessLogic, FavoriteDataStore {
    var presenter: FavoritePresentationLogic?
    var worker = FavoriteWorker()
    var favoritePhoneList: [Phone] = []
    var request: Favorite.FavoriteList.Request?

    var favoritePhoneListToken: NotificationToken? = nil
    var sortToken: NotificationToken? = nil

    deinit {
        favoritePhoneListToken?.invalidate()
        sortToken?.invalidate()
    }

    // MARK: Do something
    func fetchFavoriteList(request: Favorite.FavoriteList.Request) {
        presenter?.showLoading()
        self.request = request
        var response = Favorite.FavoriteList.Response()
        if let favoritePhonelist = worker.loadFavoritePhoneList(withPredicate: request.loadPridicate) {
            response.favoritePhoneList = favoritePhonelist
            self.favoritePhoneList = favoritePhonelist
        }
        presenter?.presentSomething(response: response)
        setObserver()
    }

    func removeFavoritePhone(withId id: Int) {
        worker.setFavorite(withId: id)
    }

    func setObserver() {
        favoritePhoneListToken = worker.getObervePhoneList()?.observe({ [weak self] (changes: RealmCollectionChange) in
            switch changes {
            case .update(_, _, _, _):
                if let request = self?.request {
                    self?.fetchFavoriteList(request: request)
                }
            default:
                break
            }
        })

        sortToken = worker.getOberveSort()?.first?.observe({ [weak self] (change) in
            switch change {
            case .change(let predicate):
                if let updatedPredicate = PhoneStore.Predicate.init(rawValue: predicate.first?.newValue as! Int),
                    let updatedPhoneList = self?.worker.loadFavoritePhoneList(withPredicate: updatedPredicate) {
                    self?.request? = Favorite.FavoriteList.Request.init(withPredicate: updatedPredicate)
                    self?.favoritePhoneList = updatedPhoneList
                    let response = Favorite.FavoriteList.Response.init(favoritePhoneList: updatedPhoneList)
                    self?.presenter?.presentSomething(response: response)
                }
            default:
                break
            }
        })


    }
}
