//
//  FavoriteViewControllerTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class FavoriteViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: FavoriteViewController!
    var window: UIWindow!
    var mockFavoritePhoneList: [Favorite.FavoriteList.ViewModel.DisplayPhone]!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupFavoriteViewController()
    }

    override func tearDown() {
        window = nil
        mockFavoritePhoneList = nil
        super.tearDown()
    }

    // MARK: Test setup
    func setupFavoriteViewController() {
        sut = FavoriteViewController()
        mockFavoritePhoneList = [Favorite.FavoriteList.ViewModel.DisplayPhone.init(id: 0,
                                                                                   name: "MockPhoneName",
                                                                                   description: "MockPhoneDescription",
                                                                                   price: "MockPrice",
                                                                                   rating: "MockRating",
                                                                                   thumbnailPath: "MockPath"),
                                 Favorite.FavoriteList.ViewModel.DisplayPhone.init(id: 1,
                                                                                   name: "MockPhoneName",
                                                                                   description: "MockPhoneDescription",
                                                                                   price: "MockPrice",
                                                                                   rating: "MockRating",
                                                                                   thumbnailPath: "MockPath")]
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles
    class FavoriteBusinessLogicSpy: FavoriteBusinessLogic {
        var fetchFavoriteListCalled = false
        var removeFavoritePhoneCalled = false

        func fetchFavoriteList(request: Favorite.FavoriteList.Request) {
            fetchFavoriteListCalled = true
        }

        func removeFavoritePhone(withId id: Int) {
            removeFavoritePhoneCalled = true
        }
    }

    class FavoriteRoutingLogicSpy: (FavoriteRoutingLogic & FavoriteDataPassing) {
        var dataStore: FavoriteDataStore?
        var navigateToDetailCalled = false

        func navigateToDetail() {
            navigateToDetailCalled = true
        }
    }

    class TableViewSpy: UITableView {
        // MARK: Method call expectations
        var reloadDataCalled = false

        // MARK: Spied methods
        override func reloadData() {
            reloadDataCalled = true
        }
    }

    // MARK: Tests
    func testShouldLoadFavoriteListWhenViewIsLoaded() {
        // Given
        let spy = FavoriteBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.fetchFavoriteListCalled, "viewDidLoad() should ask the interactor to fetch favorite phone list.")
    }

    func testDisplayDeviceList() {
        // Given
        loadView()
        let tableViewSpy = TableViewSpy()
        sut.favoriteTableView = tableViewSpy
        let viewModel = Favorite.FavoriteList.ViewModel.init(displayPhone: mockFavoritePhoneList)

        // When
        sut.displayFavoriteList(viewModel: viewModel)

        // Then
        XCTAssertEqual(sut.favoritePhoneList, viewModel.displayPhone, "displayFavoriteList(viewModel: ) should set favoritePhoneList")
        XCTAssertTrue(tableViewSpy.reloadDataCalled, "displayFavoriteList(viewModel: ) should reload the table view.")
    }

    func testListTableViewSectionShouldAlwaysBeOne() {
        // Given
        loadView()

        // When
        let numberOfSections = sut.favoriteTableView.numberOfSections

        // Then
        XCTAssertEqual(numberOfSections, 1, "The number of favoriteTableView sections should always be 1")
    }

    func testFavoriteTableViewRowsShouldEqualFavoritePhoneListNumber() {
        // Given
        loadView()
        sut.favoritePhoneList = mockFavoritePhoneList

        // When
        sut.favoriteTableView.reloadData()
        let numberOfRows = sut.favoriteTableView.numberOfRows(inSection: 0)

        // Then
        XCTAssertEqual(numberOfRows, mockFavoritePhoneList.count, "The number of favoriteTableView rows should equal the number of favoritePhoneList to display")
    }

    func testConfigureFavoriteTableViewCell() {
        // Given
        loadView()
        sut.favoritePhoneList = mockFavoritePhoneList
        sut.favoriteTableView.reloadData()
        let indexPath = IndexPath(row: 0, section: 0)

        // When
        let cell = sut.favoriteTableView.cellForRow(at: indexPath) as? ListTableViewCell

        // Then
        let favoritePhoneDetail = mockFavoritePhoneList[0]
        XCTAssertEqual(cell?.thumbnailImage.currentImageURL?.absoluteString, favoritePhoneDetail.thumbnailPath)
        XCTAssertEqual(cell?.titleLabel.text, favoritePhoneDetail.name)
        XCTAssertEqual(cell?.descriptionLabel.text, favoritePhoneDetail.description)
        XCTAssertEqual(cell?.priceLabel.text, favoritePhoneDetail.price)
        XCTAssertEqual(cell?.ratingLabel.text, favoritePhoneDetail.rating)
        XCTAssertTrue((cell?.favoriteButton.isHidden)!, "Favorite button should be hidden.")
    }

    func testSelectFavoriteTableViewCell() {
        // Given
        loadView()
        let spy = FavoriteRoutingLogicSpy()
        sut.router = spy
        sut.favoritePhoneList = mockFavoritePhoneList
        sut.favoriteTableView.reloadData()
        let indexPath = IndexPath(row: 0, section: 0)

        // When
        sut.favoriteTableView.selectRow(at: indexPath, animated: true, scrollPosition: .top)
        sut.favoriteTableView.delegate?.tableView!(sut.favoriteTableView, didSelectRowAt: indexPath)

        // Then
        XCTAssertTrue(spy.navigateToDetailCalled, "didSelectRow() should ask the router to navigateToDetail.")
    }

//    func testRemoveFavorite() {
//        // Given
//        let spy = FavoriteBusinessLogicSpy()
//        sut.interactor = spy
//        loadView()
//        sut.favoritePhoneList = mockFavoritePhoneList
//        sut.favoriteTableView.reloadData()
//        let indexPath = IndexPath(row: 0, section: 0)
//        let cell = sut.favoriteTableView.cellForRow(at: indexPath) as? ListTableViewCell
//
//        // When
////        sut.favoriteTableView. selectRow(at: indexPath, animated: true, scrollPosition: .top)
//        cell?.editingStyle = .delete
//        sut.favoriteTableView.delegate?.tableView!(sut.favoriteTableView, editingStyleForRowAt: indexPath)
//
//        // Then
//
//    }


}
