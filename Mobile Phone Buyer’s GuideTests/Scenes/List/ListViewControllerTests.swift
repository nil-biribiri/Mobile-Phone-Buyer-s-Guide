//
//  ListViewControllerTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class ListViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: ListViewController!
    var window: UIWindow!
    var mockPhoneList: [List.DeviceList.ViewModel.DisplayPhone]!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupListViewController()
    }

    override func tearDown() {
        window = nil
        mockPhoneList = nil
        super.tearDown()
    }

    // MARK: Test setup
    func setupListViewController() {
        sut = ListViewController()
        mockPhoneList = [List.DeviceList.ViewModel.DisplayPhone.init(id: 0,
                                                                     name: "MockPhoneName",
                                                                     description: "MockPhoneDescription",
                                                                     price: "MockPrice",
                                                                     rating: "MockRating",
                                                                     thumbnailPath: "MockPath",
                                                                     isFavorite: true),
                         List.DeviceList.ViewModel.DisplayPhone.init(id: 1,
                                                                     name: "MockPhoneName",
                                                                     description: "MockPhoneDescription",
                                                                     price: "MockPrice",
                                                                     rating: "MockRating",
                                                                     thumbnailPath: "MockPath",
                                                                     isFavorite: true)]
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles
    class ListBusinessLogicSpy: ListBusinessLogic {
        var fetchPhoneListCalled = false
        var setFavoritePhoneCalled = false

        func fetchPhoneList(request: List.DeviceList.Request) {
            fetchPhoneListCalled = true
        }

        func setFavoritePhone(withId id: Int) {
            setFavoritePhoneCalled = true
        }
    }

    class ListRoutingLogicSpy: (ListRoutingLogic & ListDataPassing) {
        var dataStore: ListDataStore?
        var navigateToDetailCalled = false

        func navigateToDetail() {
            navigateToDetailCalled = true
        }
    }

    class TableViewSpy: UITableView {
        // MARK: Method call expectations
        var reloadDataCalled = false

        // MARK: Spied methods
        override func reloadData()
        {
            reloadDataCalled = true
        }
    }


    // MARK: Tests

    func testShouldfetchPhoneListWhenViewIsLoaded() {
        // Given
        let spy = ListBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.fetchPhoneListCalled, "viewDidLoad() should ask the interactor to fetch phone list.")
    }

    func testDisplayDeviceList() {
        // Given
        loadView()
        let tableViewSpy = TableViewSpy()
        sut.listTableView = tableViewSpy
        let viewModel = List.DeviceList.ViewModel(displayPhone: mockPhoneList)

        // When
        sut.displayDeviceList(viewModel: viewModel)

        // Then
        XCTAssertEqual(sut.phoneList, viewModel.displayPhone, "displayDeviceList(viewModel: ) should set phoneList")
        XCTAssertTrue(tableViewSpy.reloadDataCalled, "displayDeviceList(viewModel: ) should reload the table view.")
    }

    func testDisplayError() {
        // Given
        loadView()
        let error = List.DeviceList.Error.init(errorMessage: "Error Message")

        // When
        sut.displayError(error: error)
        let alertController = sut.presentedViewController as? UIAlertController

        // Then
        XCTAssertNotNil(alertController, "sut.displayError(error: ) should show alert view controller")
        XCTAssertEqual(alertController?.title, "Error", "error title should equal to Error")
        XCTAssertEqual(alertController?.message, error.errorMessage, "Error message should equal to \(error.errorMessage)")
    }

    func testListTableViewSectionShouldAlwaysBeOne() {
        // Given
        loadView()

        // When
        let numberOfSections = sut.listTableView.numberOfSections

        // Then
        XCTAssertEqual(numberOfSections, 1, "The number of listTableView sections should always be 1")
    }

    func testListTableViewRowsShouldEqualPhoneListNumber() {
        // Given
        loadView()
        sut.phoneList = mockPhoneList

        // When
        sut.listTableView.reloadData()
        let numberOfRows = sut.listTableView.numberOfRows(inSection: 0)

        // Then
        XCTAssertEqual(numberOfRows, mockPhoneList.count, "The number of listTableView rows should equal the number of phoneList to display")
    }

    func testConfigureListTableViewCell() {
        // Given
        loadView()
        sut.phoneList = mockPhoneList
        sut.listTableView.reloadData()
        let indexPath = IndexPath(row: 0, section: 0)

        // When
        let cell = sut.listTableView.cellForRow(at: indexPath) as? ListTableViewCell

        // Then
        let phoneDetail = mockPhoneList[0]
        XCTAssertEqual(cell?.thumbnailImage.currentImageURL?.absoluteString, phoneDetail.thumbnailPath)
        XCTAssertEqual(cell?.titleLabel.text, phoneDetail.name)
        XCTAssertEqual(cell?.descriptionLabel.text, phoneDetail.description)
        XCTAssertEqual(cell?.priceLabel.text, phoneDetail.price)
        XCTAssertEqual(cell?.ratingLabel.text, phoneDetail.rating)
    }

    func testSelectListTableViewCell() {
        // Given
        loadView()
        let spy = ListRoutingLogicSpy()
        sut.router = spy
        sut.phoneList = mockPhoneList
        sut.listTableView.reloadData()
        let indexPath = IndexPath(row: 0, section: 0)

        // When
        sut.listTableView.selectRow(at: indexPath, animated: true, scrollPosition: .top)
        sut.listTableView.delegate?.tableView!(sut.listTableView, didSelectRowAt: indexPath)

        // Then
        XCTAssertTrue(spy.navigateToDetailCalled, "didSelectRow() should ask the router to navigateToDetail.")
    }

    func testSelectFavorite() {
        // Given
        let spy = ListBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        sut.phoneList = mockPhoneList
        sut.listTableView.reloadData()
        let indexPath = IndexPath(row: 0, section: 0)
        let cell = sut.listTableView.cellForRow(at: indexPath) as? ListTableViewCell

        // When
        cell?.favoriteButton.sendActions(for: .touchUpInside)

        // Then
        XCTAssertTrue(spy.setFavoritePhoneCalled, "favoriteButton Action should ask the interactor to setFavorite.")
    }

}
