//
//  DetailInteractorTests.swift
//  Mobile Phone Buyerâ€™s Guide
//
//  Created by Tanasak Ngerniam on 28/1/2562 BE.
//  Copyright (c) 2562 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Mobile_Phone_Buyer_s_Guide
import XCTest

class DetailInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: DetailInteractor!
    var phoneData: [Phone]!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupDetailInteractor()
        DataManager.shared.add(phoneData)
    }

    override func tearDown() {
        DataManager.shared.clearAllData()
        super.tearDown()
    }

    // MARK: Test setup
    func setupDetailInteractor() {
        sut = DetailInteractor()
        sut.phoneId = 0
        phoneData = [Phone(id: 0,
                           name: "MockName",
                           price: 100.222,
                           brand: "MockBrand",
                           desciption: "MockDescription",
                           rating: 4.5,
                           thumbImageURL: "link",
                           isFavorite: false)]

    }

    // MARK: Test doubles
    class DetailPresentationLogicSpy: DetailPresentationLogic {
        var presentPhoneDetailCalled = false

        func presentPhoneDetail(response: Detail.PhoneDetail.Response) {
            presentPhoneDetailCalled = true
        }
    }
    class DetailWorkerSuccessMock: DetailWorker {
        var fetchPhoneImagesCalled = false
        var getPhoneDetailCalled = false

        override func fetchPhoneImages(withId id: Int, completion: @escaping (Result<[PhoneImage]>) -> Void) {
            fetchPhoneImagesCalled = true
            completion(Result.success([PhoneImage(url: "")]))
        }

        override func getPhoneDetail(withId id: Int) -> Phone? {
            getPhoneDetailCalled = true
            return Phone()
        }
    }


    // MARK: Tests
    func testLoadPhoneDetail() {
        // Given
        let spy = DetailPresentationLogicSpy()
        sut.presenter = spy
        let request = Detail.PhoneDetail.Request()

        // When
        sut.loadPhoneDetail(request: request)

        // Then
        XCTAssertTrue(spy.presentPhoneDetailCalled, "loadPhoneDetail(request:) should ask the presenter to present phone detail.")
    }

    func testFetchPhoneImages() {
        // Given
        let spy = DetailPresentationLogicSpy()
        let mock = DetailWorkerSuccessMock()
        sut.presenter = spy
        sut.worker = mock

        // When
        sut.fetchPhoneImages()

        // Then
        XCTAssertTrue(spy.presentPhoneDetailCalled, "fetchPhoneImages() should ask the presenter to present phone detail.")
    }
}
